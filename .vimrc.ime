if &encoding !=? 'utf-8'
  let &termencoding = &encoding
  set encoding=utf-8
endif

scriptencoding utf-8

if has('guess_encode')
  set fileencodings=ucs-bom,utf-8,iso-2022-jp,guess,euc-jp,cp932,latin1
else
  set fileencodings=ucs-bom,utf-8,iso-2022-jp,euc-jp,cp932,latin1
endif
set fileformats=unix,dos

set rtp+=~/.vim/dein/repos/github.com/vim-denops/denops.vim
set rtp+=~/.vim/dein/repos/github.com/vim-skk/skkeleton
set rtp+=~/.vim/dein/repos/github.com/NI57721/skkeleton-azik
set rtp+=~/.vim/dein/repos/github.com/Shougo/ddc.vim
set rtp+=~/.vim/dein/repos/github.com/Shougo/ddc-ui-native
set rtp+=~/.vim/dein/repos/github.com/Shougo/ddc-source-around
set rtp+=~/.vim/dein/repos/github.com/Shougo/ddc-matcher_head
set rtp+=~/.vim/dein/repos/github.com/LumaKernel/ddc-source-file
set rtp+=~/.vim/dein/repos/github.com/tani/ddc-fuzzy
set rtp+=~/.vim/dein/repos/github.com/Shougo/ddu.vim
set rtp+=~/.vim/dein/repos/github.com/Shougo/ddu-source-file
set rtp+=~/.vim/dein/repos/github.com/Shougo/ddu-kind-file
set rtp+=~/.vim/dein/repos/github.com/Shougo/ddu-column-filename
set rtp+=~/.vim/dein/repos/github.com/Shougo/ddu-ui-filer
set rtp+=~/.vim/dein/repos/github.com/monaqa/dps-dial.vim

" Settings for ddc.vim
call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('sources', [
\   'around', 'file', 'skkeleton',
\ ])
call ddc#custom#patch_global('sourceOptions', {
\   'around': {'mark': 'arnd'},
\   'buffer': {'mark': 'buf'},
\   'file': {
\     'mark': 'file',
\     'isVolatile': v:true,
\     'forceCompletionPattern': '\S/\S*',
\   },
\   'skkeleton': {
\     'mark': 'skk',
\     'matchers': ['skkeleton'],
\     'sorters': [],
\     'minAutoCompleteLength': 2,
\   },
\   '_': {
\     'matchers': ['matcher_fuzzy', 'matcher_head'],
\     'sorters': ['sorter_fuzzy'],
\     'converters': ['converter_fuzzy'],
\   },
\ })


call ddc#custom#patch_global('sourceParams', {
\   'around': {'maxSize': 50},
\   'buffer': {
\     'requireSameFiletype': v:false,
\     'limitBytes': 10000,
\     'fromAltBuf': v:true,
\     'forceCollect': v:true,
\   },
\ })

call ddc#custom#patch_filetype(['ps1', 'dosbatch', 'autohotkey', 'registry'], {
\   'sourceOptions': {
\     'file': {
\       'forceCompletionPattern': '\S\\\S*',
\     },
\   },
\   'sourceParams': {
\     'file': {
\       'mode': 'win32',
\     },
\   },
\ })

call ddc#enable()


" Settings for ddu.vim
call ddu#custom#patch_global({
\   'ui': 'filer',
\   'sources': [{'name': 'file', 'params': {}}],
\   'actionOptions': {
\     'narrow': {
\       'quit': v:false,
\     },
\   },
\   'sourceOptions': {
\     '_': {
\       'columns': ['filename'],
\     },
\   },
\   'kindOptions': {
\     'file': {
\       'defaultAction': 'open',
\     },
\   }
\ })

let mapleader = "\<Space>"

colorscheme desert
set ruler
set showcmd
set shortmess-=S
set smartindent
set display=lastline
set backspace=indent,eol,start
set nofixeol
set ignorecase
set smartcase
set tabpagemax=255
set whichwrap=b,s,h,l,<,>,[,]
set list
set listchars=tab:>-,extends:<,trail:-
set hlsearch
set incsearch
set expandtab
set shiftwidth=2
set matchpairs+=<:>,「:」,（:）,『:』,【:】,《:》,〈:〉,｛:｝,［:］,【:】,‘:’,“:”
set autochdir
set spell
set spelllang& spelllang+=cjk
set spelloptions& spelloptions+=camel
set formatoptions+=M
set nrformats+=unsigned
set scrolloff=5

nnoremap <leader>s <Cmd>setlocal spell! spell?<CR>
runtime ftplugin/man.vim

inoremap <silent> jj <ESC>
inoremap <silent> ｊｊ <ESC>
cnoremap jj <ESC>

vnoremap < <gv
vnoremap > >gv

noremap  <C-Tab>   :tabnext<CR>2<C-G>
noremap  <S-C-Tab> :tabprevious<CR>2<C-G>
noremap  <C-Right> :tabnext<CR>2<C-G>
noremap  <C-Left>  :tabprevious<CR>2<C-G>
noremap  <C-Down>  :q<CR>2<C-G>
tnoremap <C-Tab>   <C-w>gt<CR>:f<CR>
tnoremap <S-C-Tab> <C-w>gT<CR>:f<CR>
noremap  gr        :tabnext<CR>2<C-G>
noremap  gR        :tabprevious<CR>2<C-G>

nnoremap <leader>h <C-6>
nnoremap <C-L> :noh<CR><C-L>
" nnoremap <C-L> :noh<CR><C-L>:call setline(1, getline(1, '$'))<CR>
nnoremap * *``zz
nnoremap # #``zz

nnoremap <leader>m <Plug>(MatchitNormalForward)
vnoremap <leader>m <Plug>(MatchitVisualForward)
nnoremap <leader>q <Plug>(socrates-greed)

" vim-sandwich
let g:sandwich_no_default_key_mappings = 1
nmap <leader>a  <Plug>(sandwich-add)
xmap <leader>a  <Plug>(sandwich-add)
omap <leader>a  <Plug>(sandwich-add)
nmap <leader>d  <Plug>(sandwich-delete)
xmap <leader>d  <Plug>(sandwich-delete)
nmap <leader>db <Plug>(sandwich-delete-auto)
nmap <leader>r  <Plug>(sandwich-replace)
xmap <leader>r  <Plug>(sandwich-replace)
nmap <leader>rb <Plug>(sandwich-replace-auto)


noremap  j gj
noremap gj  j
noremap  k gk
noremap gk  k
nnoremap <Up>   gk
nnoremap <Down> gj
inoremap <Up>   <C-O>gk
inoremap <Down> <C-O>gj

inoremap <Tab>   <C-N>
inoremap <S-Tab> <C-P>

nnoremap <expr> n (v:searchforward ? 'n' : 'N')
nnoremap <expr> N (v:searchforward ? 'N' : 'n')

xnoremap p P
xnoremap P p
nnoremap <silent> R <Plug>(operator-replace)
xnoremap <silent> R <Plug>(operator-replace)
nnoremap <silent> RR R

" Change the size of windows
nnoremap <S-Left>  <C-W><<CR>
nnoremap <S-Right> <C-W>><CR>
nnoremap <S-Up>    <C-W>-<CR>
nnoremap <S-Down>  <C-W>+<CR>

" Not yank when using x, X, or s in normal mode
nnoremap x "_x
nnoremap X "_X
nnoremap s "_s

nnoremap Y y$
nnoremap / /\v
nnoremap <C-G>  2<C-G>
nnoremap 2<C-G> <C-G>

nnoremap mm mQ
nnoremap mk `Q

" Change cursors according with mode
let &t_ti .= "\e[1 q"
let &t_SI .= "\e[5 q"
let &t_EI .= "\e[1 q"
let &t_te .= "\e[0 q"

" Enable bracketed-paste
if &term =~ 'screen'
  let &t_BE = "\e[?2004h"
  let &t_BD = "\e[?2004l"
  exec "set t_PS=\e[200~"
  exec "set t_PE=\e[201~"
endif

" Set the indent inside the p tags
let g:html_indent_inctags = 'p'

" Auto completion to close XML tags
augroup MyXML
  autocmd!
  autocmd Filetype xml  inoremap <buffer> </ </<C-X><C-O>
  autocmd Filetype html inoremap <buffer> </ </<C-X><C-O>
augroup END

" Define a skk dictionary
call skkeleton#config({
\   'globalDictionaries': [
\     ['~/.skk/SKK-JISYO.L', 'euc-jp'],
\     ['~/.skk/SKK-JISYO.geo', 'euc-jp'],
\     ['~/.skk/SKK-JISYO.jinmei', 'euc-jp'],
\     ['~/.skk/SKK-JISYO.propernoun', 'euc-jp'],
\     ['~/.skk/SKK-JISYO.station', 'euc-jp'],
\     ['~/.skk/SKK-JISYO.emoji.utf8', 'utf-8'],
\     ['~/.skk/zipcode/SKK-JISYO.zipcode', 'euc-jp']
\   ],
\   'eggLikeNewline': v:true,
\   'keepState': v:true,
\   'markerHenkan': 'γ',
\   'markerHenkanSelect': 'Γ',
\   'registerConvertResult': v:true,
\   'showCandidatesCount': 1
\ })
call skkeleton#register_keymap('input', ';', 'henkanPoint')
augroup Skkeleton
  autocmd!
  autocmd InsertEnter * :call skkeleton#register_kanatable('rom', {
    \   'jj': 'escape',
    "\   'mb': ['ん', 'b'],
    "\   'mm': ['ん', 'm'],
    "\   'mp': ['ん', 'p'],
    \   'xi':  ['し', ''],
    \   'ji':  ['じ', ''],
    \   'ci':  ['ち', ''],
    \   'tch': ['っ', 'c'],
    \   'tsi': ['つぃ', ''],
    \   'tsu': ['つ', ''],
    \   'tse': ['つぇ', ''],
    \   'tso': ['つぉ', ''],
    \ })
augroup END

" let g:skkeleton_azik_enable_rule_1 = v:false
" let g:skkeleton_azik_enable_rule_2 = v:false
" let g:skkeleton_azik_enable_rule_3 = v:false
" let g:skkeleton_azik_enable_rule_4 = v:false

imap <C-J> <Plug>(skkeleton-toggle)
cmap <C-J> <Plug>(skkeleton-toggle)

" Define original sequences for dps_dial
let g:dps_dial#augends = [
\   'decimal',
\   'date-hyphen',
\   'date-slash',
\   {'kind': 'constant', 'opts': {'elements': ['true', 'false']}},
\   {'kind': 'constant', 'opts': {
\     'elements': ['月', '火', '水', '木', '金', '土', '日'],
\     'cyclic': v:true,
\     'word': v:false,
\   }},
\   {'kind': 'constant', 'opts': {
\     'elements': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
\     'cyclic': v:true,
\     'word': v:true,
\   }},
\   {'kind': 'case', 'opts': {
\     'cases': ['camelCase', 'snake_case', 'SCREAMING_SNAKE_CASE'],
\     'cyclic': v:true,
\   }},
\   {'kind': 'date', 'opts': { 'format': 'yyyy-MM-dd', 'only_valid': v:false }},
\ ]

nnoremap  <C-A>  <Plug>(dps-dial-increment)
nmap      <C-X>  <Plug>(dps-dial-decrement)
xnoremap  <C-A>  <Plug>(dps-dial-increment)
xmap      <C-X>  <Plug>(dps-dial-decrement)
xnoremap g<C-A> g<Plug>(dps-dial-increment)
xmap     g<C-X> g<Plug>(dps-dial-decrement)

cabbr h tab :help
cabbr encto edit ++encoding=

set clipboard=exclude:.*
augroup LazyClipboardSetup
  autocmd!
  autocmd CursorHold,CursorMoved * :call serverlist() | set clipboard=unnamedplus
augroup END

augroup MakeSkkeletonEnable
  autocmd!
  autocmd InsertEnter * :echom "Insert!"
  autocmd InsertEnter * :call feedkeys("\<C-J>")
augroup END

